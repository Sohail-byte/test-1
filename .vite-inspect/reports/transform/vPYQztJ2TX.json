{
  "resolvedId": "C:/Users/XFXRe/Desktop/Portfolio/node_modules/fs-extra/lib/ensure/symlink-paths.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nconst path = require('path')\nconst fs = require('../fs')\nconst { pathExists } = require('../path-exists')\n\nconst u = require('universalify').fromPromise\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nasync function symlinkPaths (srcpath, dstpath) {\n  if (path.isAbsolute(srcpath)) {\n    try {\n      await fs.lstat(srcpath)\n    } catch (err) {\n      err.message = err.message.replace('lstat', 'ensureSymlink')\n      throw err\n    }\n\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  }\n\n  const dstdir = path.dirname(dstpath)\n  const relativeToDst = path.join(dstdir, srcpath)\n\n  const exists = await pathExists(relativeToDst)\n  if (exists) {\n    return {\n      toCwd: relativeToDst,\n      toDst: srcpath\n    }\n  }\n\n  try {\n    await fs.lstat(srcpath)\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureSymlink')\n    throw err\n  }\n\n  return {\n    toCwd: srcpath,\n    toDst: path.relative(dstdir, srcpath)\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  if (path.isAbsolute(srcpath)) {\n    const exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  }\n\n  const dstdir = path.dirname(dstpath)\n  const relativeToDst = path.join(dstdir, srcpath)\n  const exists = fs.existsSync(relativeToDst)\n  if (exists) {\n    return {\n      toCwd: relativeToDst,\n      toDst: srcpath\n    }\n  }\n\n  const srcExists = fs.existsSync(srcpath)\n  if (!srcExists) throw new Error('relative srcpath does not exist')\n  return {\n    toCwd: srcpath,\n    toDst: path.relative(dstdir, srcpath)\n  }\n}\n\nmodule.exports = {\n  symlinkPaths: u(symlinkPaths),\n  symlinkPathsSync\n}\n",
      "start": 1718972211642,
      "end": 1718972211699,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1718972211699,
      "end": 1718972211699,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1718972211699,
      "end": 1718972211699,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1718972211699,
      "end": 1718972211699,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1718972211699,
      "end": 1718972211699,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1718972211699,
      "end": 1718972211699,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1718972211699,
      "end": 1718972211699,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1718972211699,
      "end": 1718972211699,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1718972211699,
      "end": 1718972211699,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1718972211699,
      "end": 1718972211699,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport require$$1 from \"\\u0000C:/Users/XFXRe/Desktop/Portfolio/node_modules/fs-extra/lib/fs/index.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000C:/Users/XFXRe/Desktop/Portfolio/node_modules/fs-extra/lib/path-exists/index.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000C:/Users/XFXRe/Desktop/Portfolio/node_modules/universalify/index.js?commonjs-proxy\";\n\n'use strict'\n\nconst path = require$$0\nconst fs = require$$1\nconst { pathExists } = require$$2\n\nconst u = require$$3.fromPromise\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nasync function symlinkPaths (srcpath, dstpath) {\n  if (path.isAbsolute(srcpath)) {\n    try {\n      await fs.lstat(srcpath)\n    } catch (err) {\n      err.message = err.message.replace('lstat', 'ensureSymlink')\n      throw err\n    }\n\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  }\n\n  const dstdir = path.dirname(dstpath)\n  const relativeToDst = path.join(dstdir, srcpath)\n\n  const exists = await pathExists(relativeToDst)\n  if (exists) {\n    return {\n      toCwd: relativeToDst,\n      toDst: srcpath\n    }\n  }\n\n  try {\n    await fs.lstat(srcpath)\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureSymlink')\n    throw err\n  }\n\n  return {\n    toCwd: srcpath,\n    toDst: path.relative(dstdir, srcpath)\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  if (path.isAbsolute(srcpath)) {\n    const exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  }\n\n  const dstdir = path.dirname(dstpath)\n  const relativeToDst = path.join(dstdir, srcpath)\n  const exists = fs.existsSync(relativeToDst)\n  if (exists) {\n    return {\n      toCwd: relativeToDst,\n      toDst: srcpath\n    }\n  }\n\n  const srcExists = fs.existsSync(srcpath)\n  if (!srcExists) throw new Error('relative srcpath does not exist')\n  return {\n    toCwd: srcpath,\n    toDst: path.relative(dstdir, srcpath)\n  }\n}\n\nvar symlinkPaths_1 = {\n  symlinkPaths: u(symlinkPaths),\n  symlinkPathsSync\n}\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(symlinkPaths_1);\nexport { symlinkPaths_1 as __moduleExports };",
      "start": 1718972211699,
      "end": 1718972211815,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;;AAAA,YAAY;AACZ;AACA,MAAM,IAAI,GAAG,UAAe;AAC5B,MAAM,EAAE,GAAG,UAAgB;AAC3B,MAAM,EAAE,UAAU,EAAE,GAAG,UAAyB;AAChD;AACA,MAAM,CAAC,GAAG,UAAuB,CAAC,WAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY,EAAE,OAAO,EAAE,OAAO,EAAE;AAC/C,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;AAChC,IAAI,IAAI;AACR,MAAM,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC;AAC7B,KAAK,CAAC,OAAO,GAAG,EAAE;AAClB,MAAM,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,eAAe,CAAC;AACjE,MAAM,MAAM,GAAG;AACf,KAAK;AACL;AACA,IAAI,OAAO;AACX,MAAM,KAAK,EAAE,OAAO;AACpB,MAAM,KAAK,EAAE,OAAO;AACpB,KAAK;AACL,GAAG;AACH;AACA,EAAE,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;AACtC,EAAE,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;AAClD;AACA,EAAE,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,aAAa,CAAC;AAChD,EAAE,IAAI,MAAM,EAAE;AACd,IAAI,OAAO;AACX,MAAM,KAAK,EAAE,aAAa;AAC1B,MAAM,KAAK,EAAE,OAAO;AACpB,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI;AACN,IAAI,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC;AAC3B,GAAG,CAAC,OAAO,GAAG,EAAE;AAChB,IAAI,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,eAAe,CAAC;AAC/D,IAAI,MAAM,GAAG;AACb,GAAG;AACH;AACA,EAAE,OAAO;AACT,IAAI,KAAK,EAAE,OAAO;AAClB,IAAI,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC;AACzC,GAAG;AACH,CAAC;AACD;AACA,SAAS,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE;AAC7C,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;AAChC,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC;AACzC,IAAI,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;AACnE,IAAI,OAAO;AACX,MAAM,KAAK,EAAE,OAAO;AACpB,MAAM,KAAK,EAAE,OAAO;AACpB,KAAK;AACL,GAAG;AACH;AACA,EAAE,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;AACtC,EAAE,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;AAClD,EAAE,MAAM,MAAM,GAAG,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;AAC7C,EAAE,IAAI,MAAM,EAAE;AACd,IAAI,OAAO;AACX,MAAM,KAAK,EAAE,aAAa;AAC1B,MAAM,KAAK,EAAE,OAAO;AACpB,KAAK;AACL,GAAG;AACH;AACA,EAAE,MAAM,SAAS,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC;AAC1C,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;AACpE,EAAE,OAAO;AACT,IAAI,KAAK,EAAE,OAAO;AAClB,IAAI,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC;AACzC,GAAG;AACH,CAAC;AACD;IACA,cAAc,GAAG;AACjB,EAAE,YAAY,EAAE,CAAC,CAAC,YAAY,CAAC;AAC/B,EAAE,gBAAgB;AAClB"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1718972211815,
      "end": 1718972211815,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1718972211815,
      "end": 1718972211815,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1718972211815,
      "end": 1718972211815,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1718972211815,
      "end": 1718972211815,
      "order": "normal"
    }
  ]
}
