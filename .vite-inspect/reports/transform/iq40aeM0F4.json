{
  "resolvedId": "C:/Users/XFXRe/Desktop/Portfolio/node_modules/fs-extra/lib/copy/copy.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst { mkdirs } = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst { utimesMillis } = require('../util/utimes')\nconst stat = require('../util/stat')\n\nasync function copy (src, dest, opts = {}) {\n  if (typeof opts === 'function') {\n    opts = { filter: opts }\n  }\n\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    process.emitWarning(\n      'Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n' +\n      '\\tsee https://github.com/jprichardson/node-fs-extra/issues/269',\n      'Warning', 'fs-extra-WARN0001'\n    )\n  }\n\n  const { srcStat, destStat } = await stat.checkPaths(src, dest, 'copy', opts)\n\n  await stat.checkParentPaths(src, srcStat, dest, 'copy')\n\n  const include = await runFilter(src, dest, opts)\n\n  if (!include) return\n\n  // check if the parent of dest exists, and create it if it doesn't exist\n  const destParent = path.dirname(dest)\n  const dirExists = await pathExists(destParent)\n  if (!dirExists) {\n    await mkdirs(destParent)\n  }\n\n  await getStatsAndPerformCopy(destStat, src, dest, opts)\n}\n\nasync function runFilter (src, dest, opts) {\n  if (!opts.filter) return true\n  return opts.filter(src, dest)\n}\n\nasync function getStatsAndPerformCopy (destStat, src, dest, opts) {\n  const statFn = opts.dereference ? fs.stat : fs.lstat\n  const srcStat = await statFn(src)\n\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)\n\n  if (\n    srcStat.isFile() ||\n    srcStat.isCharacterDevice() ||\n    srcStat.isBlockDevice()\n  ) return onFile(srcStat, destStat, src, dest, opts)\n\n  if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)\n  if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`)\n  if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`)\n  throw new Error(`Unknown file: ${src}`)\n}\n\nasync function onFile (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts)\n\n  if (opts.overwrite) {\n    await fs.unlink(dest)\n    return copyFile(srcStat, src, dest, opts)\n  }\n  if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`)\n  }\n}\n\nasync function copyFile (srcStat, src, dest, opts) {\n  await fs.copyFile(src, dest)\n  if (opts.preserveTimestamps) {\n    // Make sure the file is writable before setting the timestamp\n    // otherwise open fails with EPERM when invoked with 'r+'\n    // (through utimes call)\n    if (fileIsNotWritable(srcStat.mode)) {\n      await makeFileWritable(dest, srcStat.mode)\n    }\n\n    // Set timestamps and mode correspondingly\n\n    // Note that The initial srcStat.atime cannot be trusted\n    // because it is modified by the read(2) system call\n    // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n    const updatedSrcStat = await fs.stat(src)\n    await utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime)\n  }\n\n  return fs.chmod(dest, srcStat.mode)\n}\n\nfunction fileIsNotWritable (srcMode) {\n  return (srcMode & 0o200) === 0\n}\n\nfunction makeFileWritable (dest, srcMode) {\n  return fs.chmod(dest, srcMode | 0o200)\n}\n\nasync function onDir (srcStat, destStat, src, dest, opts) {\n  // the dest directory might not exist, create it\n  if (!destStat) {\n    await fs.mkdir(dest)\n  }\n\n  const items = await fs.readdir(src)\n\n  // loop through the files in the current directory to copy everything\n  await Promise.all(items.map(async item => {\n    const srcItem = path.join(src, item)\n    const destItem = path.join(dest, item)\n\n    // skip the item if it is matches by the filter function\n    const include = await runFilter(srcItem, destItem, opts)\n    if (!include) return\n\n    const { destStat } = await stat.checkPaths(srcItem, destItem, 'copy', opts)\n\n    // If the item is a copyable file, `getStatsAndPerformCopy` will copy it\n    // If the item is a directory, `getStatsAndPerformCopy` will call `onDir` recursively\n    return getStatsAndPerformCopy(destStat, srcItem, destItem, opts)\n  }))\n\n  if (!destStat) {\n    await fs.chmod(dest, srcStat.mode)\n  }\n}\n\nasync function onLink (destStat, src, dest, opts) {\n  let resolvedSrc = await fs.readlink(src)\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)\n  }\n  if (!destStat) {\n    return fs.symlink(resolvedSrc, dest)\n  }\n\n  let resolvedDest = null\n  try {\n    resolvedDest = await fs.readlink(dest)\n  } catch (e) {\n    // dest exists and is a regular file or directory,\n    // Windows may throw UNKNOWN error. If dest already exists,\n    // fs throws error anyway, so no need to guard against it here.\n    if (e.code === 'EINVAL' || e.code === 'UNKNOWN') return fs.symlink(resolvedSrc, dest)\n    throw e\n  }\n  if (opts.dereference) {\n    resolvedDest = path.resolve(process.cwd(), resolvedDest)\n  }\n  if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n    throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)\n  }\n\n  // do not copy if src is a subdir of dest since unlinking\n  // dest in this case would result in removing src contents\n  // and therefore a broken symlink would be created.\n  if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n    throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)\n  }\n\n  // copy the link\n  await fs.unlink(dest)\n  return fs.symlink(resolvedSrc, dest)\n}\n\nmodule.exports = copy\n",
      "start": 1718972211561,
      "end": 1718972211622,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1718972211622,
      "end": 1718972211622,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1718972211622,
      "end": 1718972211622,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1718972211622,
      "end": 1718972211622,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1718972211622,
      "end": 1718972211622,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1718972211622,
      "end": 1718972211622,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1718972211622,
      "end": 1718972211622,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1718972211622,
      "end": 1718972211622,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1718972211622,
      "end": 1718972211622,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1718972211622,
      "end": 1718972211622,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000C:/Users/XFXRe/Desktop/Portfolio/node_modules/fs-extra/lib/fs/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport require$$2 from \"\\u0000C:/Users/XFXRe/Desktop/Portfolio/node_modules/fs-extra/lib/mkdirs/index.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000C:/Users/XFXRe/Desktop/Portfolio/node_modules/fs-extra/lib/path-exists/index.js?commonjs-proxy\";\nimport require$$4 from \"\\u0000C:/Users/XFXRe/Desktop/Portfolio/node_modules/fs-extra/lib/util/utimes.js?commonjs-proxy\";\nimport require$$5 from \"\\u0000C:/Users/XFXRe/Desktop/Portfolio/node_modules/fs-extra/lib/util/stat.js?commonjs-proxy\";\n\n'use strict'\n\nconst fs = require$$0\nconst path = require$$1\nconst { mkdirs } = require$$2\nconst { pathExists } = require$$3\nconst { utimesMillis } = require$$4\nconst stat = require$$5\n\nasync function copy (src, dest, opts = {}) {\n  if (typeof opts === 'function') {\n    opts = { filter: opts }\n  }\n\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    process.emitWarning(\n      'Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n' +\n      '\\tsee https://github.com/jprichardson/node-fs-extra/issues/269',\n      'Warning', 'fs-extra-WARN0001'\n    )\n  }\n\n  const { srcStat, destStat } = await stat.checkPaths(src, dest, 'copy', opts)\n\n  await stat.checkParentPaths(src, srcStat, dest, 'copy')\n\n  const include = await runFilter(src, dest, opts)\n\n  if (!include) return\n\n  // check if the parent of dest exists, and create it if it doesn't exist\n  const destParent = path.dirname(dest)\n  const dirExists = await pathExists(destParent)\n  if (!dirExists) {\n    await mkdirs(destParent)\n  }\n\n  await getStatsAndPerformCopy(destStat, src, dest, opts)\n}\n\nasync function runFilter (src, dest, opts) {\n  if (!opts.filter) return true\n  return opts.filter(src, dest)\n}\n\nasync function getStatsAndPerformCopy (destStat, src, dest, opts) {\n  const statFn = opts.dereference ? fs.stat : fs.lstat\n  const srcStat = await statFn(src)\n\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)\n\n  if (\n    srcStat.isFile() ||\n    srcStat.isCharacterDevice() ||\n    srcStat.isBlockDevice()\n  ) return onFile(srcStat, destStat, src, dest, opts)\n\n  if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)\n  if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`)\n  if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`)\n  throw new Error(`Unknown file: ${src}`)\n}\n\nasync function onFile (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts)\n\n  if (opts.overwrite) {\n    await fs.unlink(dest)\n    return copyFile(srcStat, src, dest, opts)\n  }\n  if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`)\n  }\n}\n\nasync function copyFile (srcStat, src, dest, opts) {\n  await fs.copyFile(src, dest)\n  if (opts.preserveTimestamps) {\n    // Make sure the file is writable before setting the timestamp\n    // otherwise open fails with EPERM when invoked with 'r+'\n    // (through utimes call)\n    if (fileIsNotWritable(srcStat.mode)) {\n      await makeFileWritable(dest, srcStat.mode)\n    }\n\n    // Set timestamps and mode correspondingly\n\n    // Note that The initial srcStat.atime cannot be trusted\n    // because it is modified by the read(2) system call\n    // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n    const updatedSrcStat = await fs.stat(src)\n    await utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime)\n  }\n\n  return fs.chmod(dest, srcStat.mode)\n}\n\nfunction fileIsNotWritable (srcMode) {\n  return (srcMode & 0o200) === 0\n}\n\nfunction makeFileWritable (dest, srcMode) {\n  return fs.chmod(dest, srcMode | 0o200)\n}\n\nasync function onDir (srcStat, destStat, src, dest, opts) {\n  // the dest directory might not exist, create it\n  if (!destStat) {\n    await fs.mkdir(dest)\n  }\n\n  const items = await fs.readdir(src)\n\n  // loop through the files in the current directory to copy everything\n  await Promise.all(items.map(async item => {\n    const srcItem = path.join(src, item)\n    const destItem = path.join(dest, item)\n\n    // skip the item if it is matches by the filter function\n    const include = await runFilter(srcItem, destItem, opts)\n    if (!include) return\n\n    const { destStat } = await stat.checkPaths(srcItem, destItem, 'copy', opts)\n\n    // If the item is a copyable file, `getStatsAndPerformCopy` will copy it\n    // If the item is a directory, `getStatsAndPerformCopy` will call `onDir` recursively\n    return getStatsAndPerformCopy(destStat, srcItem, destItem, opts)\n  }))\n\n  if (!destStat) {\n    await fs.chmod(dest, srcStat.mode)\n  }\n}\n\nasync function onLink (destStat, src, dest, opts) {\n  let resolvedSrc = await fs.readlink(src)\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)\n  }\n  if (!destStat) {\n    return fs.symlink(resolvedSrc, dest)\n  }\n\n  let resolvedDest = null\n  try {\n    resolvedDest = await fs.readlink(dest)\n  } catch (e) {\n    // dest exists and is a regular file or directory,\n    // Windows may throw UNKNOWN error. If dest already exists,\n    // fs throws error anyway, so no need to guard against it here.\n    if (e.code === 'EINVAL' || e.code === 'UNKNOWN') return fs.symlink(resolvedSrc, dest)\n    throw e\n  }\n  if (opts.dereference) {\n    resolvedDest = path.resolve(process.cwd(), resolvedDest)\n  }\n  if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n    throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)\n  }\n\n  // do not copy if src is a subdir of dest since unlinking\n  // dest in this case would result in removing src contents\n  // and therefore a broken symlink would be created.\n  if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n    throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)\n  }\n\n  // copy the link\n  await fs.unlink(dest)\n  return fs.symlink(resolvedSrc, dest)\n}\n\nvar copy_1 = copy\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(copy_1);\nexport { copy_1 as __moduleExports };",
      "start": 1718972211622,
      "end": 1718972211819,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1718972211819,
      "end": 1718972211819,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1718972211819,
      "end": 1718972211819,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1718972211819,
      "end": 1718972211819,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1718972211819,
      "end": 1718972211819,
      "order": "normal"
    }
  ]
}
